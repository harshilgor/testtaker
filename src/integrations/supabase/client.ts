
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use hardcoded Supabase credentials (Lovable doesn't support VITE_ env vars)
const SUPABASE_URL = 'https://kpcprhkubqhslazlhgad.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtwY3ByaGt1YnFoc2xhemxoZ2FkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgzODkzNTIsImV4cCI6MjA2Mzk2NTM1Mn0.kqHLbGSNGdwtxBKkjqw5Cod6si0j_qnrvpw5u_Q860Q';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    flowType: 'pkce', // Add PKCE flow for better compatibility
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  global: {
    headers: {
      'X-Client-Info': 'get1600-app',
    },
  },
});

// Test connection on startup
console.log('🔌 Initializing Supabase client...');
console.log('📍 URL:', SUPABASE_URL);
console.log('🔑 Key:', SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...');

// Test the connection with better error handling
const testConnection = async () => {
  try {
    console.log('🧪 Testing Supabase connection...');
    
    // First test basic connectivity
    const response = await fetch(SUPABASE_URL + '/rest/v1/', {
      method: 'GET',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    // Then test auth connection
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('❌ Supabase connection error:', error);
      console.error('Error details:', {
        message: error.message,
        status: error.status,
        name: error.name
      });
    } else {
      console.log('✅ Supabase connected successfully');
      console.log('📊 Session data:', data);
    }
  } catch (err) {
    console.error('💥 Supabase connection test failed:', err);
    console.error('This usually means:');
    console.error('1. Your Supabase project is paused/deleted');
    console.error('2. Your credentials are incorrect');
    console.error('3. There are network/firewall issues');
    console.error('4. Edge Functions are unhealthy');
  }
};

// Test connection after a short delay to ensure client is fully initialized
setTimeout(testConnection, 1000);

// Test database connectivity
const testDatabaseConnection = async () => {
  try {
    console.log('🗄️ Testing database connection...');
    const { data, error } = await supabase
      .from('profiles')
      .select('count', { count: 'exact', head: true })
      .limit(1);
    
    if (error) {
      console.error('❌ Database connection error:', error);
      console.error('Error details:', {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint
      });
    } else {
      console.log('✅ Database connection successful');
      console.log('📊 Data response:', data);
    }
  } catch (err) {
    console.error('💥 Unexpected database error:', err);
  }
};

// Test database after connection test
setTimeout(testDatabaseConnection, 2000);

// Add error handling for connection issues
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT') {
    console.log('👋 User signed out, clearing local data');
    // Clear any cached data when user signs out
    localStorage.removeItem('quizResults');
  }
});

// Connection monitoring can be handled through auth state changes
// Realtime connection status is managed internally by Supabase
