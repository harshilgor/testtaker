
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables for Supabase credentials
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!SUPABASE_URL || SUPABASE_URL === 'your_supabase_project_url_here') {
  console.error('‚ùå VITE_SUPABASE_URL is not set in environment variables');
}

if (!SUPABASE_PUBLISHABLE_KEY || SUPABASE_PUBLISHABLE_KEY === 'your_supabase_anon_key_here') {
  console.error('‚ùå VITE_SUPABASE_ANON_KEY is not set in environment variables');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    flowType: 'pkce', // Add PKCE flow for better compatibility
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  global: {
    headers: {
      'X-Client-Info': 'get1600-app',
    },
  },
});

// Test connection on startup
console.log('üîå Initializing Supabase client...');
console.log('üìç URL:', SUPABASE_URL);
console.log('üîë Key:', SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...');

// Test the connection with better error handling
const testConnection = async () => {
  try {
    console.log('üß™ Testing Supabase connection...');
    
    // First test basic connectivity
    const response = await fetch(SUPABASE_URL + '/rest/v1/', {
      method: 'GET',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    // Then test auth connection
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Supabase connection error:', error);
      console.error('Error details:', {
        message: error.message,
        status: error.status,
        name: error.name
      });
    } else {
      console.log('‚úÖ Supabase connected successfully');
      console.log('üìä Session data:', data);
    }
  } catch (err) {
    console.error('üí• Supabase connection test failed:', err);
    console.error('This usually means:');
    console.error('1. Your Supabase project is paused/deleted');
    console.error('2. Your credentials are incorrect');
    console.error('3. There are network/firewall issues');
    console.error('4. Edge Functions are unhealthy');
  }
};

// Test connection after a short delay to ensure client is fully initialized
setTimeout(testConnection, 1000);

// Test database connectivity
const testDatabaseConnection = async () => {
  try {
    console.log('üóÑÔ∏è Testing database connection...');
    const { data, error } = await supabase
      .from('profiles')
      .select('count', { count: 'exact', head: true })
      .limit(1);
    
    if (error) {
      console.error('‚ùå Database connection error:', error);
      console.error('Error details:', {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint
      });
    } else {
      console.log('‚úÖ Database connection successful');
      console.log('üìä Data response:', data);
    }
  } catch (err) {
    console.error('üí• Unexpected database error:', err);
  }
};

// Test database after connection test
setTimeout(testDatabaseConnection, 2000);

// Add error handling for connection issues
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT') {
    console.log('üëã User signed out, clearing local data');
    // Clear any cached data when user signs out
    localStorage.removeItem('quizResults');
  }
});

// Connection monitoring can be handled through auth state changes
// Realtime connection status is managed internally by Supabase
